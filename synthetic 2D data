import numpy as np
import matplotlib.pyplot as plt

# Set a random seed for reproducibility
np.random.seed(42)

# Generate 2000 samples
num_samples = 2000

# Class 0: Centered around (-3, 3) with more spread
class_0 = np.random.randn(num_samples, 2) * 1.5 + np.array([-3, 3])

# Class 1: Centered around (3, 3) with more spread to overlap with Class 0
class_1 = np.random.randn(num_samples, 2) * 1.5 + np.array([3, 3])

# Combine the datasets
X = np.vstack((class_0, class_1))
y = np.hstack((np.zeros(num_samples), np.ones(num_samples)))

# Introduce label noise (0.5-1% of the labels flipped)
noise_ratio = np.random.uniform(0.005, 0.01)
num_noisy_samples = int(noise_ratio * len(y))
noisy_indices = np.random.choice(len(y), num_noisy_samples, replace=False)
y_noisy = y.copy()
y_noisy[noisy_indices] = 1 - y_noisy[noisy_indices]  # Flip labels

# Plot the dataset with more spread and overlap
plt.figure(figsize=(10, 8))  # Increased figure size
plt.scatter(X[y_noisy == 0, 0], X[y_noisy == 0, 1], color='lightskyblue', s=5, label='Class 0')
plt.scatter(X[y_noisy == 1, 0], X[y_noisy == 1, 1], color='lightsalmon', s=5, label='Class 1')
plt.xlabel('X1')
plt.ylabel('X2')
plt.xlim(-5, 7)
plt.ylim(-4, 8)
plt.legend()
plt.title(f'Overlapping Binary Classification Dataset with {noise_ratio:.2%} Label Noise')
plt.show()
